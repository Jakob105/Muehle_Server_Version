Index: src/Frame.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import javax.swing.*;\r\nimport java.awt.*;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\nimport javax.swing.*;\r\nimport java.util.Timer;\r\nimport java.util.TimerTask;\r\n\r\npublic class Frame extends JFrame{\r\n    private boolean playerColour;\r\n    private boolean gameOver;\r\n    private int amountOfUnusedWhiteStones;\r\n    private int amountOfUnusedBlackStones;\r\n    private int amountOfWhiteStonesOutOfGame;\r\n    private int amountOfBlackStonesOutOfGame;\r\n    private boolean aMillWasCreatedInThePreviousAction;\r\n    private boolean stoneIsSelected;\r\n    private Feld selectedStone;\r\n    private boolean itsYourTurn;\r\n    private boolean changePlayer;\r\n    private List<Feld> whiteStonesOnBoard;\r\n    private List<Feld> blackStonesOnBoard;\r\n    private List<Feld> whiteStonesOutOfGame;\r\n    private List<Feld> blackStonesOutOfGame;\r\n    private Feld[][] fields = new Feld[3][8];\r\n    private GameHandler opponent;\r\n    private String playerName;\r\n\r\n    private JPanel displayPlayerName;\r\n    private JLabel displayPlayerNameLabel;\r\n    private JPanel displayPlayerColour;\r\n    private JLabel blackMoveLabel;\r\n    private JLabel whiteMoveLabel;\r\n    private JLabel blackTakeStoneLabel;\r\n    private JLabel whiteTakeStoneLabel;\r\n    private JLabel countLabel;\r\n    private JLabel blackWins;\r\n    private JLabel whiteWins;\r\n    private JLabel displayBlackPlayer;\r\n    private JLabel displayWhitePlayer;\r\n    private JPanel panel;\r\n    private JPanel largeHorizontalLine1 ;\r\n    private JPanel largeHorizontalLine2;\r\n    private JPanel largeHorizontalLine3;\r\n    private JPanel largeHorizontalLine4;\r\n    private JPanel mediumHorizontalLine1;\r\n    private JPanel mediumHorizontalLine2;\r\n    private JPanel mediumHorizontalLine3;\r\n    private JPanel mediumHorizontalLine4;\r\n    private JPanel smallHorizontalLine1;\r\n    private JPanel smallHorizontalLine2;\r\n    private JPanel smallHorizontalLine3;\r\n    private JPanel smallHorizontalLine4;\r\n    private JPanel largeVerticalLine1;\r\n    private JPanel largeVerticalLine2;\r\n    private JPanel largeVerticalLine3;\r\n    private JPanel largeVerticalLine4;\r\n    private JPanel mediumVerticalLine1;\r\n    private JPanel mediumVerticalLine2;\r\n    private JPanel mediumVerticalLine3;\r\n    private JPanel mediumVerticalLine4;\r\n    private JPanel smallVerticalLine1;\r\n    private JPanel smallVerticalLine2;\r\n    private JPanel smallVerticalLine3;\r\n    private JPanel smallVerticalLine4;\r\n    private JPanel verticalCrossingLine1;\r\n    private JPanel verticalCrossingLine2;\r\n    private JPanel verticalCrossingLine3;\r\n    private JPanel verticalCrossingLine4;\r\n    private JPanel horizontalCrossingLine1;\r\n    private JPanel horizontalCrossingLine2;\r\n    private JPanel horizontalCrossingLine3;\r\n    private JPanel horizontalCrossingLine4;\r\n    private MyMouseListener myMouseListener1;\r\n    private MyMouseListener myMouseListener2;\r\n    private MyMouseListener myMouseListener3;\r\n    private MyMouseListener myMouseListener4;\r\n    private MyMouseListener myMouseListener5;\r\n    private MyMouseListener myMouseListener6;\r\n    private MyMouseListener myMouseListener7;\r\n    private MyMouseListener myMouseListener8;\r\n    private MyMouseListener myMouseListener9;\r\n    private MyMouseListener myMouseListener10;\r\n    private MyMouseListener myMouseListener11;\r\n    private MyMouseListener myMouseListener12;\r\n    private MyMouseListener myMouseListener13;\r\n    private MyMouseListener myMouseListener14;\r\n    private MyMouseListener myMouseListener15;\r\n    private MyMouseListener myMouseListener16;\r\n    private MyMouseListener myMouseListener17;\r\n    private MyMouseListener myMouseListener18;\r\n    private MyMouseListener myMouseListener19;\r\n    private MyMouseListener myMouseListener20;\r\n    private MyMouseListener myMouseListener21;\r\n    private MyMouseListener myMouseListener22;\r\n    private MyMouseListener myMouseListener23;\r\n    private MyMouseListener myMouseListener24;\r\n\r\n    public Frame(){\r\n\r\n    }\r\n    public Frame(boolean colour, GameHandler opponent, String playerName){\r\n\r\n        this.setTitle(\"MÃ¼hle\");\r\n        this.setLayout(null);\r\n        this.setSize(800,875);\r\n        this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\r\n        this.setResizable(false);\r\n        this.playerName = playerName;\r\n        playerColour = true;\r\n        gameOver = false;\r\n        amountOfUnusedWhiteStones = 9;\r\n        amountOfUnusedBlackStones = 9;\r\n        amountOfWhiteStonesOutOfGame = 0;\r\n        amountOfBlackStonesOutOfGame = 0;\r\n        aMillWasCreatedInThePreviousAction = false;\r\n        stoneIsSelected = false;\r\n        selectedStone = null;\r\n        whiteStonesOnBoard = new ArrayList<Feld>();\r\n        blackStonesOnBoard = new ArrayList<Feld>();\r\n        whiteStonesOutOfGame = new ArrayList<Feld>();\r\n        blackStonesOutOfGame = new ArrayList<Feld>();\r\n        if(colour) {\r\n            itsYourTurn = true;\r\n        }\r\n        else {\r\n            itsYourTurn = false;\r\n        }\r\n        this.opponent = opponent;\r\n        changePlayer = false;\r\n\r\n        blackMoveLabel = new JLabel(\"black moves\");\r\n        blackMoveLabel.setVerticalAlignment(JLabel.CENTER);\r\n        blackMoveLabel.setHorizontalAlignment(JLabel.CENTER);\r\n        blackMoveLabel.setForeground(Color.white);\r\n        whiteMoveLabel = new JLabel(\"white moves\");\r\n        whiteMoveLabel.setVerticalAlignment(JLabel.CENTER);\r\n        whiteMoveLabel.setHorizontalAlignment(JLabel.CENTER);\r\n        displayBlackPlayer = new JLabel(\"You are player black.\");\r\n        displayBlackPlayer.setVerticalAlignment(JLabel.CENTER);\r\n        displayBlackPlayer.setHorizontalAlignment(JLabel.CENTER);\r\n        displayBlackPlayer.setForeground(Color.white);\r\n        displayWhitePlayer = new JLabel(\"You are player white.\");\r\n        displayWhitePlayer.setVerticalAlignment(JLabel.CENTER);\r\n        displayWhitePlayer.setHorizontalAlignment(JLabel.CENTER);\r\n        countLabel = new JLabel(String.valueOf(amountOfUnusedBlackStones));\r\n        countLabel.setVerticalAlignment(JLabel.TOP);\r\n        countLabel.setHorizontalAlignment(JLabel.CENTER);\r\n        panel = new JPanel();\r\n        panel.setBackground(new Color(245,245,220,255));\r\n        panel.setBounds(325,325,150,150);\r\n        panel.setLayout(new BorderLayout());\r\n        panel.add(whiteMoveLabel,BorderLayout.CENTER);\r\n        panel.add(countLabel,BorderLayout.NORTH);\r\n        this.add(panel);\r\n        displayPlayerColour = new JPanel();\r\n        if(colour) {\r\n            displayPlayerColour.setBackground(new Color(245,245,220,255));\r\n            displayPlayerColour.setBounds(300,775,200,50);\r\n            displayPlayerColour.setLayout(new BorderLayout());\r\n            displayPlayerColour.add(displayWhitePlayer,BorderLayout.CENTER);\r\n        }\r\n        else {\r\n            displayPlayerColour.setBackground(Color.black);\r\n            displayPlayerColour.setBounds(300,775,200,50);\r\n            displayPlayerColour.setLayout(new BorderLayout());\r\n            displayPlayerColour.add(displayBlackPlayer,BorderLayout.CENTER);\r\n        }\r\n        this.add(displayPlayerColour);\r\n\r\n        displayPlayerNameLabel = new JLabel(\"Player: \"+playerName);\r\n        displayPlayerName = new JPanel();\r\n        displayPlayerName.setBackground(Color.white);\r\n        displayPlayerName.setBounds(50,775,200,50);\r\n        displayPlayerName.setLayout(new BorderLayout());\r\n        displayPlayerName.add(displayPlayerNameLabel);\r\n        this.add(displayPlayerName);\r\n\r\n        largeHorizontalLine1 = new JPanel();\r\n        largeHorizontalLine1.setBackground(Color.black);\r\n        largeHorizontalLine1.setBounds(100,70,275,10);\r\n        this.add(largeHorizontalLine1);\r\n        largeHorizontalLine2 = new JPanel();\r\n        largeHorizontalLine2.setBackground(Color.black);\r\n        largeHorizontalLine2.setBounds(425,70,275,10);\r\n        this.add(largeHorizontalLine2);\r\n        largeHorizontalLine3 = new JPanel();\r\n        largeHorizontalLine3.setBackground(Color.black);\r\n        largeHorizontalLine3.setBounds(100,720,275,10);\r\n        this.add(largeHorizontalLine3);\r\n        largeHorizontalLine4 = new JPanel();\r\n        largeHorizontalLine4.setBackground(Color.black);\r\n        largeHorizontalLine4.setBounds(425,720,275,10);\r\n        this.add(largeHorizontalLine4);\r\n        mediumHorizontalLine1 = new JPanel();\r\n        mediumHorizontalLine1.setBackground(Color.black);\r\n        mediumHorizontalLine1.setBounds(200,170,175,10);\r\n        this.add(mediumHorizontalLine1);\r\n        mediumHorizontalLine2 = new JPanel();\r\n        mediumHorizontalLine2.setBackground(Color.black);\r\n        mediumHorizontalLine2.setBounds(425,170,175,10);\r\n        this.add(mediumHorizontalLine2);\r\n        mediumHorizontalLine3 = new JPanel();\r\n        mediumHorizontalLine3.setBackground(Color.black);\r\n        mediumHorizontalLine3.setBounds(200,620,175,10);\r\n        this.add(mediumHorizontalLine3);\r\n        mediumHorizontalLine4 = new JPanel();\r\n        mediumHorizontalLine4.setBackground(Color.black);\r\n        mediumHorizontalLine4.setBounds(425,620,175,10);\r\n        this.add(mediumHorizontalLine4);\r\n        smallHorizontalLine1 = new JPanel();\r\n        smallHorizontalLine1.setBackground(Color.black);\r\n        smallHorizontalLine1.setBounds(300,270,75,10);\r\n        this.add(smallHorizontalLine1);\r\n        smallHorizontalLine2 = new JPanel();\r\n        smallHorizontalLine2.setBackground(Color.black);\r\n        smallHorizontalLine2.setBounds(425,270,75,10);\r\n        this.add(smallHorizontalLine2);\r\n        smallHorizontalLine3 = new JPanel();\r\n        smallHorizontalLine3.setBackground(Color.black);\r\n        smallHorizontalLine3.setBounds(300,520,75,10);\r\n        this.add(smallHorizontalLine3);\r\n        smallHorizontalLine4 = new JPanel();\r\n        smallHorizontalLine4.setBackground(Color.black);\r\n        smallHorizontalLine4.setBounds(425,520,75,10);\r\n        this.add(smallHorizontalLine4);\r\n        largeVerticalLine1 = new JPanel();\r\n        largeVerticalLine1.setBackground(Color.black);\r\n        largeVerticalLine1.setBounds(70,100,10,275);\r\n        this.add(largeVerticalLine1);\r\n        largeVerticalLine2 = new JPanel();\r\n        largeVerticalLine2.setBackground(Color.black);\r\n        largeVerticalLine2.setBounds(720,100,10,275);\r\n        this.add(largeVerticalLine2);\r\n        largeVerticalLine3 = new JPanel();\r\n        largeVerticalLine3.setBackground(Color.black);\r\n        largeVerticalLine3.setBounds(720,425,10,275);\r\n        this.add(largeVerticalLine3);\r\n        largeVerticalLine4 = new JPanel();\r\n        largeVerticalLine4.setBackground(Color.black);\r\n        largeVerticalLine4.setBounds(70,425,10,275);\r\n        this.add(largeVerticalLine4);\r\n        mediumVerticalLine1 = new JPanel();\r\n        mediumVerticalLine1.setBackground(Color.black);\r\n        mediumVerticalLine1.setBounds(170,200,10,175);\r\n        this.add(mediumVerticalLine1);\r\n        mediumVerticalLine2 = new JPanel();\r\n        mediumVerticalLine2.setBackground(Color.black);\r\n        mediumVerticalLine2.setBounds(620,200,10,175);\r\n        this.add(mediumVerticalLine2);\r\n        mediumVerticalLine3 = new JPanel();\r\n        mediumVerticalLine3.setBackground(Color.black);\r\n        mediumVerticalLine3.setBounds(620,425,10,175);\r\n        this.add(mediumVerticalLine3);\r\n        mediumVerticalLine4 = new JPanel();\r\n        mediumVerticalLine4.setBackground(Color.black);\r\n        mediumVerticalLine4.setBounds(170,425,10,175);\r\n        this.add(mediumVerticalLine4);\r\n        smallVerticalLine1 = new JPanel();\r\n        smallVerticalLine1.setBackground(Color.black);\r\n        smallVerticalLine1.setBounds(270,300,10,75);\r\n        this.add(smallVerticalLine1);\r\n        smallVerticalLine2 = new JPanel();\r\n        smallVerticalLine2.setBackground(Color.black);\r\n        smallVerticalLine2.setBounds(520,300,10,75);\r\n        this.add(smallVerticalLine2);\r\n        smallVerticalLine3 = new JPanel();\r\n        smallVerticalLine3.setBackground(Color.black);\r\n        smallVerticalLine3.setBounds(270,425,10,75);\r\n        this.add(smallVerticalLine3);\r\n        smallVerticalLine4 = new JPanel();\r\n        smallVerticalLine4.setBackground(Color.black);\r\n        smallVerticalLine4.setBounds(520,425,10,75);\r\n        this.add(smallVerticalLine4);\r\n        verticalCrossingLine1 = new JPanel();\r\n        verticalCrossingLine1.setBackground(Color.black);\r\n        verticalCrossingLine1.setBounds(395,100,10,50);\r\n        this.add(verticalCrossingLine1);\r\n        verticalCrossingLine2 = new JPanel();\r\n        verticalCrossingLine2.setBackground(Color.black);\r\n        verticalCrossingLine2.setBounds(395,200,10,50);\r\n        this.add(verticalCrossingLine2);\r\n        verticalCrossingLine3 = new JPanel();\r\n        verticalCrossingLine3.setBackground(Color.black);\r\n        verticalCrossingLine3.setBounds(395,550,10,50);\r\n        this.add(verticalCrossingLine3);\r\n        verticalCrossingLine4 = new JPanel();\r\n        verticalCrossingLine4.setBackground(Color.black);\r\n        verticalCrossingLine4.setBounds(395,650,10,50);\r\n        this.add(verticalCrossingLine4);\r\n        horizontalCrossingLine1 = new JPanel();\r\n        horizontalCrossingLine1.setBackground(Color.black);\r\n        horizontalCrossingLine1.setBounds(100,395,50,10);\r\n        this.add(horizontalCrossingLine1);\r\n        horizontalCrossingLine2 = new JPanel();\r\n        horizontalCrossingLine2.setBackground(Color.black);\r\n        horizontalCrossingLine2.setBounds(200,395,50,10);\r\n        this.add(horizontalCrossingLine2);\r\n        horizontalCrossingLine3 = new JPanel();\r\n        horizontalCrossingLine3.setBackground(Color.black);\r\n        horizontalCrossingLine3.setBounds(550,395,50,10);\r\n        this.add(horizontalCrossingLine3);\r\n        horizontalCrossingLine4 = new JPanel();\r\n        horizontalCrossingLine4.setBackground(Color.black);\r\n        horizontalCrossingLine4.setBounds(650,395,50,10);\r\n        this.add(horizontalCrossingLine4);\r\n\r\n\r\n        fields[0][0] = new Feld((byte)1,(byte)1);\r\n        myMouseListener1 = new MyMouseListener(this,fields[0][0]);\r\n        fields[0][0].addMouseListener(myMouseListener1);\r\n        fields[0][0].setBounds(50,50,50,50);\r\n        fields[0][0].setIndex(1);\r\n        this.add(fields[0][0]);\r\n\r\n        fields[0][1] = new Feld((byte)1,(byte)2);\r\n        myMouseListener2 = new MyMouseListener(this,fields[0][1]);\r\n        fields[0][1].addMouseListener(myMouseListener2);\r\n        fields[0][1].setBounds(375,50,50,50);\r\n        fields[0][1].setIndex(2);\r\n        this.add(fields[0][1]);\r\n\r\n        fields[0][2] = new Feld((byte)1,(byte)3);\r\n        myMouseListener3 = new MyMouseListener(this,fields[0][2]);\r\n        fields[0][2].addMouseListener(myMouseListener3);\r\n        fields[0][2].setBounds(700,50,50,50);\r\n        fields[0][2].setIndex(3);\r\n        this.add(fields[0][2]);\r\n\r\n        fields[0][3] = new Feld((byte)1,(byte)4);\r\n        myMouseListener4 = new MyMouseListener(this,fields[0][3]);\r\n        fields[0][3].addMouseListener(myMouseListener4);\r\n        fields[0][3].setBounds(700,375,50,50);\r\n        fields[0][3].setIndex(4);\r\n        this.add(fields[0][3]);\r\n\r\n        fields[0][4] = new Feld((byte)1,(byte)5);\r\n        myMouseListener5 = new MyMouseListener(this,fields[0][4]);\r\n        fields[0][4].addMouseListener(myMouseListener5);;\r\n        fields[0][4].setBounds(700,700,50,50);\r\n        fields[0][4].setIndex(5);\r\n        this.add(fields[0][4]);\r\n\r\n        fields[0][5] = new Feld((byte)1,(byte)6);\r\n        myMouseListener6 = new MyMouseListener(this,fields[0][5]);\r\n        fields[0][5].addMouseListener(myMouseListener6);\r\n        fields[0][5].setBounds(375,700,50,50);\r\n        fields[0][5].setIndex(6);\r\n        this.add(fields[0][5]);\r\n\r\n        fields[0][6] = new Feld((byte)1,(byte)7);\r\n        myMouseListener7 = new MyMouseListener(this,fields[0][6]);\r\n        fields[0][6].addMouseListener(myMouseListener7);\r\n        fields[0][6].setBounds(50,700,50,50);\r\n        fields[0][6].setIndex(7);\r\n        this.add(fields[0][6]);\r\n\r\n        fields[0][7] = new Feld((byte)1,(byte)8);\r\n        myMouseListener8 = new MyMouseListener(this,fields[0][7]);\r\n        fields[0][7].addMouseListener(myMouseListener8);\r\n        fields[0][7].setBounds(50,375,50,50);\r\n        fields[0][7].setIndex(8);\r\n        this.add(fields[0][7]);\r\n\r\n        fields[1][0] = new Feld((byte)2,(byte)1);\r\n        myMouseListener9 = new MyMouseListener(this,fields[1][0]);\r\n        fields[1][0].addMouseListener(myMouseListener9);\r\n        fields[1][0].setBounds(150,150,50,50);\r\n        fields[1][0].setIndex(9);\r\n        this.add(fields[1][0]);\r\n\r\n        fields[1][1] = new Feld((byte)2,(byte)2);\r\n        myMouseListener10 = new MyMouseListener(this,fields[1][1]);\r\n        fields[1][1].addMouseListener(myMouseListener10);\r\n        fields[1][1].setBounds(375,150,50,50);\r\n        fields[1][1].setIndex(10);\r\n        this.add(fields[1][1]);\r\n\r\n        fields[1][2] = new Feld((byte)2,(byte)3);\r\n        myMouseListener11 = new MyMouseListener(this,fields[1][2]);\r\n        fields[1][2].addMouseListener(myMouseListener11);\r\n        fields[1][2].setBounds(600,150,50,50);\r\n        fields[1][2].setIndex(11);\r\n        this.add(fields[1][2]);\r\n\r\n        fields[1][3] = new Feld((byte)2,(byte)4);\r\n        myMouseListener12 = new MyMouseListener(this,fields[1][3]);\r\n        fields[1][3].addMouseListener(myMouseListener12);\r\n        fields[1][3].setBounds(600,375,50,50);\r\n        fields[1][3].setIndex(12);\r\n        this.add(fields[1][3]);\r\n\r\n        fields[1][4] = new Feld((byte)2,(byte)5);\r\n        myMouseListener13 = new MyMouseListener(this,fields[1][4]);\r\n        fields[1][4].addMouseListener(myMouseListener13);\r\n        fields[1][4].setBounds(600,600,50,50);\r\n        fields[1][4].setIndex(13);\r\n        this.add(fields[1][4]);\r\n\r\n        fields[1][5] = new Feld((byte)2,(byte)6);\r\n        myMouseListener14 = new MyMouseListener(this,fields[1][5]);\r\n        fields[1][5].addMouseListener(myMouseListener14);\r\n        fields[1][5].setBounds(375,600,50,50);\r\n        fields[1][5].setIndex(14);\r\n        this.add(fields[1][5]);\r\n\r\n        fields[1][6] = new Feld((byte)2,(byte)7);\r\n        myMouseListener15 = new MyMouseListener(this,fields[1][6]);\r\n        fields[1][6].addMouseListener(myMouseListener15);\r\n        fields[1][6].setBounds(150,600,50,50);\r\n        fields[1][6].setIndex(15);\r\n        this.add(fields[1][6]);\r\n\r\n        fields[1][7] = new Feld((byte)2,(byte)8);\r\n        myMouseListener16 = new MyMouseListener(this,fields[1][7]);\r\n        fields[1][7].addMouseListener(myMouseListener16);\r\n        fields[1][7].setBounds(150,375,50,50);\r\n        fields[1][7].setIndex(16);\r\n        this.add(fields[1][7]);\r\n\r\n        fields[2][0] = new Feld((byte)3,(byte)1);\r\n        myMouseListener17 = new MyMouseListener(this,fields[2][0]);\r\n        fields[2][0].addMouseListener(myMouseListener17);\r\n        fields[2][0].setBounds(250,250,50,50);\r\n        fields[2][0].setIndex(17);\r\n        this.add(fields[2][0]);\r\n\r\n        fields[2][1] = new Feld((byte)3,(byte)2);\r\n        myMouseListener18 = new MyMouseListener(this,fields[2][1]);\r\n        fields[2][1].addMouseListener(myMouseListener18);\r\n        fields[2][1].setBounds(375,250,50,50);\r\n        fields[2][1].setIndex(18);\r\n        this.add(fields[2][1]);\r\n\r\n        fields[2][2] = new Feld((byte)3,(byte)3);\r\n        myMouseListener19 = new MyMouseListener(this,fields[2][2]);\r\n        fields[2][2].addMouseListener(myMouseListener19);\r\n        fields[2][2].setBounds(500,250,50,50);\r\n        fields[2][2].setIndex(19);\r\n        this.add(fields[2][2]);\r\n\r\n        fields[2][3] = new Feld((byte)3,(byte)4);\r\n        myMouseListener20 = new MyMouseListener(this,fields[2][3]);\r\n        fields[2][3].addMouseListener(myMouseListener20);\r\n        fields[2][3].setBounds(500,375,50,50);\r\n        fields[2][3].setIndex(20);\r\n        this.add(fields[2][3]);\r\n\r\n        fields[2][4] = new Feld((byte)3,(byte)5);\r\n        myMouseListener21 = new MyMouseListener(this,fields[2][4]);\r\n        fields[2][4].addMouseListener(myMouseListener21);\r\n        fields[2][4].setBounds(500,500,50,50);\r\n        fields[2][4].setIndex(21);\r\n        this.add(fields[2][4]);\r\n\r\n        fields[2][5] = new Feld((byte)3,(byte)6);\r\n        myMouseListener22 = new MyMouseListener(this,fields[2][5]);\r\n        fields[2][5].addMouseListener(myMouseListener22);\r\n        fields[2][5].setBounds(375,500,50,50);\r\n        fields[2][5].setIndex(22);\r\n        this.add(fields[2][5]);\r\n\r\n        fields[2][6] = new Feld((byte)3,(byte)7);\r\n        myMouseListener23 = new MyMouseListener(this,fields[2][6]);\r\n        fields[2][6].addMouseListener(myMouseListener23);\r\n        fields[2][6].setBounds(250,500,50,50);\r\n        fields[2][6].setIndex(23);\r\n        this.add(fields[2][6]);\r\n\r\n        fields[2][7] = new Feld((byte)3,(byte)8);\r\n        myMouseListener24 = new MyMouseListener(this,fields[2][7]);\r\n        fields[2][7].addMouseListener(myMouseListener24);\r\n        fields[2][7].setBounds(250,375,50,50);\r\n        fields[2][7].setIndex(24);\r\n        this.add(fields[2][7]);\r\n\r\n\r\n        JLabel TimerLabelWhite = new JLabel();\r\n        JLabel TimerLabelBlack = new JLabel();\r\n        TimerLabelWhite.setBounds(200,1,200,50);\r\n        TimerLabelBlack.setBounds(450,1,200,50);\r\n        this.add(TimerLabelWhite);\r\n        this.add(TimerLabelBlack);\r\n        Timer timer = new Timer();\r\n\r\n        timer.scheduleAtFixedRate(new TimerTask() {\r\n            int i = 120;\r\n            int j = 120;\r\n\r\n            public void run() {\r\n                if (colour) {\r\n                    if (itsYourTurn) {\r\n                        TimerLabelWhite.setText(\"White Player Time left: \" + i);\r\n                        i--;\r\n                        TimerLabelBlack.setText(\" Black Player Time left: \" + j);\r\n\r\n\r\n                    } else {\r\n                        TimerLabelWhite.setText(\" White Player Time left: \" + i);\r\n                        TimerLabelBlack.setText(\"Black Player Time left: \" + j);\r\n                        j--;\r\n                    }\r\n                }else{\r\n                    if (itsYourTurn) {\r\n                        TimerLabelBlack.setText(\" Black Player Time left: \" + j);\r\n                        j--;\r\n                        TimerLabelWhite.setText(\" White Player Time left: \" + i);\r\n\r\n\r\n                    } else {\r\n                        TimerLabelWhite.setText(\"White Player Time left: \" + i);\r\n                        TimerLabelBlack.setText(\"Black Player Time left: \" + j);\r\n                        i--;\r\n                    }\r\n                }\r\n                if(i<0 || j<0){\r\n                    isGameOver();\r\n                }\r\n\r\n            }\r\n        }, 0, 1000);\r\n\r\n\r\n        this.setVisible(true);\r\n    }\r\n\r\n\r\n    public List<Feld> getWhiteStonesOnBoard() {\r\n        return whiteStonesOnBoard;\r\n    }\r\n\r\n    public List<Feld> getBlackStonesOnBoard() {\r\n        return blackStonesOnBoard;\r\n    }\r\n\r\n    public GameHandler getOpponent() {\r\n        return opponent;\r\n    }\r\n\r\n    public void setOpponent(GameHandler opponent) {\r\n        this.opponent = opponent;\r\n    }\r\n\r\n    public boolean isChangePlayer() {\r\n        return changePlayer;\r\n    }\r\n\r\n    public void setChangePlayer(boolean changePlayer) {\r\n        this.changePlayer = changePlayer;\r\n    }\r\n\r\n    public boolean isItsYourTurn() {\r\n        return itsYourTurn;\r\n    }\r\n\r\n    public void setItsYourTurn(boolean itsYourTurn) {\r\n        this.itsYourTurn = itsYourTurn;\r\n    }\r\n\r\n    public boolean isGameOver() {\r\n        return gameOver;\r\n    }\r\n\r\n    public boolean isaMillWasCreatedInThePreviousAction() {\r\n        return aMillWasCreatedInThePreviousAction;\r\n    }\r\n\r\n    public void setGameOver(boolean gameOver) {\r\n        this.gameOver = gameOver;\r\n    }\r\n\r\n    public boolean isPlayerColour() {\r\n        return playerColour;\r\n    }\r\n\r\n    public void setaMillWasCreatedInThePreviousAction(boolean aMillWasCreatedInThePreviousAction) {\r\n        this.aMillWasCreatedInThePreviousAction = aMillWasCreatedInThePreviousAction;\r\n    }\r\n\r\n    public void setPlayerName(String playerName) {\r\n        this.playerName = playerName;\r\n    }\r\n\r\n    public int getAmountOfUnusedWhiteStones() {\r\n        return amountOfUnusedWhiteStones;\r\n    }\r\n\r\n    public int getAmountOfUnusedBlackStones() {\r\n        return amountOfUnusedBlackStones;\r\n    }\r\n\r\n    public Feld[][] getFields() {\r\n        return fields;\r\n    }\r\n\r\n    public int getAmountOfUnusedStones(boolean playerColour){\r\n        if (playerColour){return getAmountOfUnusedWhiteStones();}\r\n        else {return getAmountOfUnusedBlackStones();}\r\n    }\r\n    public void firstPhaseMove(Feld field){\r\n        if (field.isEmpty()){\r\n            firstPhaseSetStone(field);\r\n            if (stoneIsInMill(field)){\r\n                addRequestToDeleteStone();\r\n                setaMillWasCreatedInThePreviousAction(true);\r\n            }\r\n            else {\r\n                changePlayer = true;\r\n                adaptDisplayOfCurrentPlayer();\r\n                opponent.getFrame().adaptDisplayOfCurrentPlayer();\r\n            }\r\n        }\r\n    }\r\n    public void firstPhaseSetStone(Feld field){\r\n        Feld opponentsField = opponent.getFrame().indexToField(field.getIndex());\r\n        if (playerColour){\r\n            field.setIcon(new ImageIcon(\"WeisserStein.png\"));\r\n            opponentsField.setIcon(new ImageIcon(\"WeisserStein.png\"));\r\n\r\n            whiteStonesOnBoard.add(field);\r\n            opponent.getFrame().whiteStonesOnBoard.add(opponentsField);\r\n\r\n            amountOfUnusedWhiteStones --;\r\n            opponent.getFrame().amountOfUnusedWhiteStones--;\r\n        }\r\n        else {\r\n            field.setIcon(new ImageIcon(\"SchwarzerStein.png\"));\r\n            opponentsField.setIcon(new ImageIcon(\"SchwarzerStein.png\"));\r\n\r\n            blackStonesOnBoard.add(field);\r\n            opponent.getFrame().blackStonesOnBoard.add(opponentsField);\r\n\r\n            amountOfUnusedBlackStones --;\r\n            opponent.getFrame().amountOfUnusedBlackStones--;\r\n        }\r\n        field.setEmpty(false);\r\n        opponentsField.setEmpty(false);\r\n\r\n        field.setColourOfStone(playerColour);\r\n        opponentsField.setColourOfStone(playerColour);\r\n\r\n        playerColour = !playerColour;\r\n        opponent.getFrame().playerColour = ! opponent.getFrame().playerColour;\r\n    }\r\n    public void secondPhaseMove(Feld field){\r\n        if (!playerColour){\r\n            panel.remove(countLabel);\r\n            opponent.getFrame().panel.remove(opponent.getFrame().countLabel);\r\n        }\r\n        if (stoneIsSelected){\r\n            if (fieldsAreNeighbours(selectedStone,field) && field.isEmpty()){\r\n                secondPhaseSetStone(field);\r\n                if (stoneIsInMill(field)){\r\n                    addRequestToDeleteStone();\r\n                    setaMillWasCreatedInThePreviousAction(true);\r\n                }\r\n                else {\r\n                    adaptDisplayOfCurrentPlayer();\r\n                    opponent.getFrame().adaptDisplayOfCurrentPlayer();\r\n                    changePlayer = true;\r\n                }\r\n            }\r\n            else {\r\n                selectAStoneYouWantToMoveInPhaseTwo(field);\r\n            }\r\n        }\r\n        else {\r\n            if (allStonesAreBlocked()){\r\n                gameOver = true;\r\n                opponent.getFrame().gameOver = true;\r\n            }\r\n            else {\r\n                selectAStoneYouWantToMoveInPhaseTwo(field);\r\n            }\r\n        }\r\n    }\r\n    public void secondPhaseSetStone(Feld field){\r\n        Feld opponentsField = opponent.getFrame().indexToField(field.getIndex());\r\n\r\n        field.setEmpty(false);\r\n        opponentsField.setEmpty(false);\r\n\r\n        selectedStone.setEmpty(true);\r\n        opponent.getFrame().selectedStone.setEmpty(true);\r\n\r\n        selectedStone.setBackground(Color.white);\r\n        opponent.getFrame().selectedStone.setBackground(Color.white);\r\n        selectedStone.setIcon(null);\r\n        opponent.getFrame().selectedStone.setIcon(null);\r\n        stoneIsSelected = false;\r\n        opponent.getFrame().stoneIsSelected = false;\r\n        if (playerColour){\r\n            field.setColourOfStone(true);\r\n            opponentsField.setColourOfStone(true);\r\n            field.setIcon(new ImageIcon(\"WeisserStein.png\"));\r\n            opponentsField.setIcon(new ImageIcon(\"WeisserStein.png\"));\r\n        }\r\n        else {\r\n            field.setColourOfStone(false);\r\n            opponentsField.setColourOfStone(false);\r\n\r\n            field.setIcon(new ImageIcon(\"SchwarzerStein.png\"));\r\n            opponentsField.setIcon(new ImageIcon(\"SchwarzerStein.png\"));\r\n        }\r\n        playerColour = !playerColour;\r\n        opponent.getFrame().playerColour = !opponent.getFrame().playerColour;\r\n    }\r\n    public void selectAStoneYouWantToMoveInPhaseTwo(Feld field){\r\n        Feld opponentsField = opponent.getFrame().indexToField(field.getIndex());\r\n        if (!field.isEmpty() && field.isColourOfStone() == playerColour){\r\n            if (!stoneIsBlocked(field)){\r\n                if (stoneIsSelected){\r\n                    selectedStone.setBackground(Color.white);\r\n                    opponent.getFrame().selectedStone.setBackground(Color.white);\r\n                }\r\n                field.setBackground(Color.green);\r\n                selectedStone = field;\r\n                opponent.getFrame().selectedStone = opponentsField;\r\n\r\n                stoneIsSelected = true;\r\n                opponent.getFrame().stoneIsSelected = true;\r\n            }\r\n            else {\r\n                if (stoneIsSelected){\r\n                    selectedStone.setBackground(Color.white);\r\n                }\r\n                field.setBackground(Color.red);\r\n                selectedStone = field;\r\n                opponent.getFrame().selectedStone = opponentsField;\r\n                stoneIsSelected = true;\r\n                opponent.getFrame().stoneIsSelected = true;\r\n            }\r\n        }\r\n    }\r\n    public void selectAStoneYouWantToMoveInPhaseThree(Feld field){\r\n        Feld opponentsField = opponent.getFrame().indexToField(field.getIndex());\r\n        if (!field.isEmpty() && field.isColourOfStone() == playerColour){\r\n            if (stoneIsSelected){\r\n                selectedStone.setBackground(Color.white);\r\n            }\r\n            field.setBackground(Color.green);\r\n            selectedStone = field;\r\n            opponent.getFrame().selectedStone = opponentsField;\r\n\r\n            stoneIsSelected = true;\r\n            opponent.getFrame().stoneIsSelected = true;\r\n        }\r\n    }\r\n    public void thirdPhaseMove(Feld field){\r\n        if (stoneIsSelected){\r\n            if (field.isEmpty()){\r\n                secondPhaseSetStone(field);\r\n                if (stoneIsInMill(field)){\r\n                    addRequestToDeleteStone();\r\n                    aMillWasCreatedInThePreviousAction = true;\r\n                }\r\n                else {\r\n                    adaptDisplayOfCurrentPlayer();\r\n                    opponent.getFrame().adaptDisplayOfCurrentPlayer();\r\n                    changePlayer = true;\r\n                }\r\n            }\r\n            else {\r\n                selectAStoneYouWantToMoveInPhaseThree(field);\r\n            }\r\n        }\r\n        else {\r\n            selectAStoneYouWantToMoveInPhaseThree(field);\r\n        }\r\n    }\r\n\r\n    public boolean fieldsAreNeighbours(Feld selectedStone, Feld field){\r\n        boolean returnValue = false;\r\n        if (selectedStone.getCircle() == (byte)1){\r\n            switch (selectedStone.getPositionOnCircle()) {\r\n                case 1 -> {\r\n                    if (field.getCircle() == 1 && (field.getPositionOnCircle() == 8 || field.getPositionOnCircle() == 2)) {returnValue = true;}\r\n                    break;\r\n                }\r\n                case 2,4,6 -> {\r\n                    if ((field.getCircle() == 1 && Math.abs(field.getPositionOnCircle() - selectedStone.getPositionOnCircle()) == 1) || (field.getPositionOnCircle() == selectedStone.getPositionOnCircle() && field.getCircle() == 2)) {returnValue = true;}\r\n                    break;\r\n                }\r\n                case 3,5,7 -> {\r\n                    if (field.getCircle() == 1 && Math.abs(field.getPositionOnCircle() - selectedStone.getPositionOnCircle()) == 1) {returnValue = true;}\r\n                    break;\r\n                }\r\n                case 8 -> {\r\n                    if ((field.getCircle() == 1 && (field.getPositionOnCircle() == 1 || field.getPositionOnCircle() == 7)) || (field.getPositionOnCircle() == 8 && field.getCircle() == 2)) {returnValue = true;}\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        else if (selectedStone.getCircle() == (byte)2){\r\n            switch (selectedStone.getPositionOnCircle()) {\r\n                case 1 -> {\r\n                    if (field.getCircle() == 2 && (field.getPositionOnCircle() == 8 || field.getPositionOnCircle() == 2)) {returnValue = true;}\r\n                    break;\r\n                }\r\n                case 2,4,6 -> {\r\n                    if ((field.getCircle() == 2 && Math.abs(field.getPositionOnCircle() - selectedStone.getPositionOnCircle()) == 1) || (field.getPositionOnCircle() == selectedStone.getPositionOnCircle() && (field.getCircle() == 1 || field.getCircle() == 3))) {returnValue = true;}\r\n                    break;\r\n                }\r\n                case 3,5,7 -> {\r\n                    if (field.getCircle() == 2 && Math.abs(field.getPositionOnCircle() - selectedStone.getPositionOnCircle()) == 1) {returnValue = true;}\r\n                    break;\r\n                }\r\n                case 8 -> {\r\n                    if ((field.getCircle() == 2 && (field.getPositionOnCircle() == 1 || field.getPositionOnCircle() == 7)) || (field.getPositionOnCircle() == 8 && (field.getCircle() == 1 || field.getCircle() == 3))) {returnValue = true;}\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            switch (selectedStone.getPositionOnCircle()) {\r\n                case 1 -> {\r\n                    if (field.getCircle() == 3 && (field.getPositionOnCircle() == 8 || field.getPositionOnCircle() == 2)) {returnValue = true;}\r\n                    break;\r\n                }\r\n                case 2,4,6 -> {\r\n                    if ((field.getCircle() == 3 && Math.abs(field.getPositionOnCircle() - selectedStone.getPositionOnCircle()) == 1) || (field.getPositionOnCircle() == selectedStone.getPositionOnCircle() && field.getCircle() == 2)) {returnValue = true;}\r\n                    break;\r\n                }\r\n                case 3,5,7 -> {\r\n                    if (field.getCircle() == 3 && Math.abs(field.getPositionOnCircle() - selectedStone.getPositionOnCircle()) == 1) {returnValue = true;}\r\n                    break;\r\n                }\r\n                case 8 -> {\r\n                    if ((field.getCircle() == 3 && (field.getPositionOnCircle() == 1 || field.getPositionOnCircle() == 7)) || (field.getPositionOnCircle() == 8 && field.getCircle() == 2)) {returnValue = true;}\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        return returnValue;\r\n    }\r\n    public boolean checkLineOnCircleForMill (Feld field, int circle, int positionOnCircle1, int positionOnCircle2){\r\n        if (!(fields[(circle - 1)][(positionOnCircle1 - 1)].isEmpty() || fields[(circle - 1)][(positionOnCircle2 - 1)].isEmpty()) && ((fields[(circle - 1)][(positionOnCircle1 - 1)].isColourOfStone() == field.isColourOfStone()) && (field.isColourOfStone() == fields[(circle - 1)][(positionOnCircle2 - 1)].isColourOfStone()))){\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    public boolean checkLineBetweenCirclesForMill (Feld field, int positionOnCircle,int circle1,int circle2){\r\n        if (!(fields[(circle1 - 1)][(positionOnCircle - 1)].isEmpty() || fields[(circle2 - 1)][(positionOnCircle - 1)].isEmpty()) && ((fields[(circle1 - 1)][(positionOnCircle - 1)].isColourOfStone() == field.isColourOfStone()) && (field.isColourOfStone() == fields[(circle2 - 1)][(positionOnCircle - 1)].isColourOfStone()))){\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    public boolean stoneIsInMill(Feld field){\r\n        boolean returnValue = false;\r\n        if (field.getCircle() == (byte)1){\r\n            switch (field.getPositionOnCircle()) {\r\n                case 1 -> {\r\n                    if (checkLineOnCircleForMill(field, 1, 2, 3)) {returnValue = true;}\r\n                    else if (checkLineOnCircleForMill(field, 1, 7, 8)) {returnValue = true;}\r\n                    break;\r\n                }\r\n                case 2,4,6 -> {\r\n                    if (checkLineOnCircleForMill(field, 1, field.getPositionOnCircle() - 1, field.getPositionOnCircle() + 1)) {returnValue = true;}\r\n                    else if (checkLineBetweenCirclesForMill(field, field.getPositionOnCircle(), 2, 3)) {returnValue = true;}\r\n                    break;\r\n                }\r\n                case 3,5 -> {\r\n                    if (checkLineOnCircleForMill(field, 1, field.getPositionOnCircle()-2, field.getPositionOnCircle()-1)) {returnValue = true;}\r\n                    else if (checkLineOnCircleForMill(field, 1, field.getPositionOnCircle()+1, field.getPositionOnCircle()+2)) {returnValue = true;}\r\n                    break;\r\n                }\r\n                case 7 -> {\r\n                    if (checkLineOnCircleForMill(field, 1, 5, 6)) {returnValue = true;}\r\n                    else if (checkLineOnCircleForMill(field, 1, 8, 1)) {returnValue = true;}\r\n                    break;\r\n                }\r\n                case 8 -> {\r\n                    if (checkLineOnCircleForMill(field, 1, 1, 7)) {returnValue = true;}\r\n                    else if (checkLineBetweenCirclesForMill(field, 8, 2, 3)) {returnValue = true;}\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        else if (field.getCircle() == (byte)2){\r\n            switch (field.getPositionOnCircle()) {\r\n                case 1 -> {\r\n                    if (checkLineOnCircleForMill(field, 2, 2, 3)) {returnValue = true;}\r\n                    else if (checkLineOnCircleForMill(field, 2, 7, 8)) {returnValue = true;}\r\n                    break;\r\n                }\r\n                case 2,4,6 -> {\r\n                    if (checkLineOnCircleForMill(field, 2, field.getPositionOnCircle() - 1, field.getPositionOnCircle() + 1)) {returnValue = true;}\r\n                    else if (checkLineBetweenCirclesForMill(field, field.getPositionOnCircle(), 1, 3)) {returnValue = true;}\r\n                    break;\r\n                }\r\n                case 3,5 -> {\r\n                    if (checkLineOnCircleForMill(field, 2, field.getPositionOnCircle()-2, field.getPositionOnCircle()-1)) {returnValue = true;}\r\n                    else if (checkLineOnCircleForMill(field, 2, field.getPositionOnCircle()+1, field.getPositionOnCircle()+2)) {returnValue = true;}\r\n                }\r\n                case 7 -> {\r\n                    if (checkLineOnCircleForMill(field, 2, 5, 6)) {returnValue = true;}\r\n                    else if (checkLineOnCircleForMill(field, 2, 8, 1)) {returnValue = true;}\r\n                    break;\r\n                }\r\n                case 8 -> {\r\n                    if (checkLineOnCircleForMill(field, 2, 1, 7)) {returnValue = true;}\r\n                    else if (checkLineBetweenCirclesForMill(field, 8, 1, 3)) {returnValue = true;}\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            switch (field.getPositionOnCircle()) {\r\n                case 1 -> {\r\n                    if (checkLineOnCircleForMill(field, 3, 2, 3)) {returnValue = true;}\r\n                    else if (checkLineOnCircleForMill(field, 3, 7, 8)) {returnValue = true;}\r\n                    break;\r\n                }\r\n                case 2,4,6 -> {\r\n                    if (checkLineOnCircleForMill(field, 3, field.getPositionOnCircle() - 1, field.getPositionOnCircle() + 1)) {returnValue = true;}\r\n                    else if (checkLineBetweenCirclesForMill(field, field.getPositionOnCircle(), 1, 2)) {returnValue = true;}\r\n                    break;\r\n                }\r\n                case 3,5 -> {\r\n                    if (checkLineOnCircleForMill(field, 3, field.getPositionOnCircle()-2, field.getPositionOnCircle()-1)) {returnValue = true;}\r\n                    else if (checkLineOnCircleForMill(field, 3, field.getPositionOnCircle()+1, field.getPositionOnCircle()+2)) {returnValue = true;}\r\n                }\r\n                case 7 -> {\r\n                    if (checkLineOnCircleForMill(field, 3, 5, 6)) {returnValue = true;}\r\n                    else if (checkLineOnCircleForMill(field, 3, 8, 1)) {returnValue = true;}\r\n                    break;\r\n                }\r\n                case 8 -> {\r\n                    if (checkLineOnCircleForMill(field, 3, 1, 7)) {returnValue = true;}\r\n                    else if (checkLineBetweenCirclesForMill(field, 8, 1, 2)) {returnValue = true;}\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        return returnValue;\r\n    }\r\n    public boolean stoneIsBlocked(Feld field){\r\n        boolean returnValue = false;\r\n        if (field.getCircle() == (byte)1){\r\n            switch (field.getPositionOnCircle()) {\r\n                case 1 -> {\r\n                    if (!fields[0][7].isEmpty() && !fields[0][1].isEmpty()) {returnValue = true;}\r\n                    break;\r\n                }\r\n                case 2,4,6 -> {\r\n                    if (!fields[0][field.getPositionOnCircle() - 2].isEmpty() && !fields[0][field.getPositionOnCircle()].isEmpty() && !fields[1][field.getPositionOnCircle() - 1].isEmpty()) {returnValue = true;}\r\n                    break;\r\n                }\r\n                case 3,5,7 -> {\r\n                    if (!fields[0][field.getPositionOnCircle() - 2].isEmpty() && !fields[0][field.getPositionOnCircle()].isEmpty()) {returnValue = true;}\r\n                    break;\r\n                }\r\n                case 8 -> {\r\n                    if (!fields[0][6].isEmpty() && !fields[0][0].isEmpty() && !fields[1][7].isEmpty()) {returnValue = true;}\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        else if (field.getCircle() == (byte)2){\r\n            switch (field.getPositionOnCircle()) {\r\n                case 1 -> {\r\n                    if (!fields[1][7].isEmpty() && !fields[1][1].isEmpty()) {returnValue = true;}\r\n                    break;\r\n                }\r\n                case 2,4,6 -> {\r\n                    if (!fields[1][field.getPositionOnCircle() - 2].isEmpty() && !fields[1][field.getPositionOnCircle()].isEmpty() && !fields[0][field.getPositionOnCircle() - 1].isEmpty() && !fields[2][field.getPositionOnCircle() - 1].isEmpty()) {returnValue = true;}\r\n                    break;\r\n                }\r\n                case 3,5,7 -> {\r\n                    if (!fields[1][field.getPositionOnCircle() - 2].isEmpty() && !fields[1][field.getPositionOnCircle()].isEmpty()) {returnValue = true;}\r\n                    break;\r\n                }\r\n                case 8 -> {\r\n                    if (!fields[1][6].isEmpty() && !fields[1][0].isEmpty() && !fields[0][7].isEmpty() && !fields[2][7].isEmpty()) {returnValue = true;}\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            switch (field.getPositionOnCircle()) {\r\n                case 1 -> {\r\n                    if (!fields[2][7].isEmpty() && !fields[2][1].isEmpty()) {returnValue = true;}\r\n                    break;\r\n                }\r\n                case 2,4,6 -> {\r\n                    if (!fields[2][field.getPositionOnCircle() - 2].isEmpty() && !fields[2][field.getPositionOnCircle()].isEmpty() && !fields[1][field.getPositionOnCircle() - 1].isEmpty()) {returnValue = true;}\r\n                    break;\r\n                }\r\n                case 3,5,7 -> {\r\n                    if (!fields[2][field.getPositionOnCircle() - 2].isEmpty() && !fields[2][field.getPositionOnCircle()].isEmpty()) {returnValue = true;}\r\n                    break;\r\n                }\r\n                case 8 -> {\r\n                    if (!fields[2][6].isEmpty() && !fields[2][0].isEmpty() && !fields[1][7].isEmpty()) {returnValue = true;}\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        return returnValue;\r\n    }\r\n    public boolean allStonesAreBlocked(){\r\n        boolean returnValue = false;\r\n        if (playerColour){\r\n            int i = 0;\r\n            while (i < whiteStonesOnBoard.size() && stoneIsBlocked(whiteStonesOnBoard.get(i))) {\r\n                i++;\r\n            }\r\n            if (i == whiteStonesOnBoard.size()){\r\n                i = 0;\r\n                while (i < whiteStonesOnBoard.size()) {\r\n                    whiteStonesOnBoard.get(i).setBackground(Color.red);\r\n                    i++;\r\n                }\r\n                returnValue = true;\r\n            }\r\n        }\r\n        else {\r\n            int i = 0;\r\n            while (i < blackStonesOnBoard.size() && stoneIsBlocked(blackStonesOnBoard.get(i))) {\r\n                i++;\r\n            }\r\n            if (i == blackStonesOnBoard.size()){\r\n                i = 0;\r\n                while (i < blackStonesOnBoard.size()) {\r\n                    blackStonesOnBoard.get(i).setBackground(Color.red);\r\n                    i++;\r\n                }\r\n                returnValue = true;\r\n            }\r\n        }\r\n        return returnValue;\r\n    }\r\n    public void removeStone(Feld field){\r\n        Feld opponentsField = opponent.getFrame().indexToField(field.getIndex());\r\n        if (!field.isEmpty() && field.isColourOfStone() == playerColour){\r\n            if (notAllStonesAreInMill()){\r\n                if (!(stoneIsInMill(field))){\r\n                    if (playerColour){\r\n\r\n                        whiteStonesOutOfGame.add(field);\r\n                        opponent.getFrame().whiteStonesOnBoard.add(opponentsField);\r\n\r\n                        whiteStonesOnBoard.remove(field);\r\n                        opponent.getFrame().whiteStonesOnBoard.remove(opponentsField);\r\n\r\n                        amountOfWhiteStonesOutOfGame++;\r\n                        opponent.getFrame().amountOfWhiteStonesOutOfGame++;\r\n                    }\r\n                    else {\r\n\r\n                        blackStonesOutOfGame.add(field);\r\n                        opponent.getFrame().blackStonesOnBoard.add(opponentsField);\r\n\r\n                        blackStonesOnBoard.remove(field);\r\n                        opponent.getFrame().blackStonesOnBoard.remove(opponentsField);\r\n\r\n                        amountOfBlackStonesOutOfGame++;\r\n                        opponent.getFrame().amountOfBlackStonesOutOfGame++;\r\n                    }\r\n                    field.setIcon(null);\r\n                    opponentsField.setIcon(null);\r\n\r\n                    removeRequestToDeleteStone();\r\n\r\n                    adaptDisplayOfCurrentPlayer();\r\n                    opponent.getFrame().adaptDisplayOfCurrentPlayer();\r\n\r\n                    field.setEmpty(true);\r\n                    opponentsField.setEmpty(true);\r\n\r\n                    setaMillWasCreatedInThePreviousAction(false);\r\n                    changePlayer = true;\r\n                }\r\n            }\r\n            else {\r\n                if (playerColour){\r\n                    whiteStonesOnBoard.remove(field);\r\n                    opponent.getFrame().whiteStonesOnBoard.remove(opponentsField);\r\n\r\n                    whiteStonesOutOfGame.add(field);\r\n                    opponent.getFrame().whiteStonesOnBoard.remove(opponentsField);\r\n\r\n                    amountOfWhiteStonesOutOfGame++;\r\n                    opponent.getFrame().amountOfWhiteStonesOutOfGame++;\r\n                }\r\n                else {\r\n                    blackStonesOnBoard.remove(field);\r\n                    opponent.getFrame().blackStonesOnBoard.remove(opponentsField);\r\n\r\n                    blackStonesOutOfGame.add(field);\r\n                    opponent.getFrame().blackStonesOutOfGame.add(opponentsField);\r\n\r\n                    amountOfBlackStonesOutOfGame++;\r\n                    opponent.getFrame().amountOfBlackStonesOutOfGame++;\r\n                }\r\n                field.setIcon(null);\r\n                opponentsField.setIcon(null);\r\n                removeRequestToDeleteStone();\r\n\r\n                adaptDisplayOfCurrentPlayer();\r\n                opponent.getFrame().adaptDisplayOfCurrentPlayer();\r\n\r\n                field.setEmpty(true);\r\n                opponentsField.setEmpty(true);\r\n\r\n                setaMillWasCreatedInThePreviousAction(false);\r\n                changePlayer = true;\r\n            }\r\n        }\r\n    }\r\n    public boolean notAllStonesAreInMill(){\r\n        boolean returnValue = true;\r\n        if (playerColour){\r\n            int i = 0;\r\n            while (i < whiteStonesOnBoard.size() && stoneIsInMill(whiteStonesOnBoard.get(i))) {\r\n                i++;\r\n            }\r\n            if (i >= whiteStonesOnBoard.size()){\r\n                returnValue = false;\r\n            }\r\n        }\r\n        else{\r\n            int i = 0;\r\n            while (i < blackStonesOnBoard.size() && stoneIsInMill(blackStonesOnBoard.get(i))) {\r\n                i++;\r\n            }\r\n            if (i >= blackStonesOnBoard.size()){\r\n                returnValue = false;\r\n            }\r\n        }\r\n        return returnValue;\r\n    }\r\n    public void adaptDisplayOfCurrentPlayer(){\r\n        if (playerColour){\r\n            panel.remove(blackMoveLabel);\r\n            panel.setBackground(new Color(245,245,220,255));\r\n            blackMoveLabel.setForeground(Color.black);\r\n            countLabel.setForeground(Color.black);\r\n            countLabel.setText(String.valueOf(amountOfUnusedBlackStones));\r\n            panel.add(whiteMoveLabel);\r\n        }\r\n        else {\r\n            panel.remove(whiteMoveLabel);\r\n            panel.setBackground(Color.black);\r\n            blackMoveLabel.setForeground(Color.white);\r\n            countLabel.setForeground(Color.white);\r\n            panel.add(blackMoveLabel);\r\n        }\r\n    }\r\n    public void addRequestToDeleteStone(){\r\n        if(playerColour){\r\n            blackTakeStoneLabel = new JLabel(\"take white stone\");\r\n            blackTakeStoneLabel.setVerticalAlignment(JLabel.BOTTOM);\r\n            blackTakeStoneLabel.setHorizontalAlignment(JLabel.CENTER);\r\n            blackTakeStoneLabel.setForeground(Color.white);\r\n            panel.add(blackTakeStoneLabel);\r\n        }\r\n        else {\r\n            whiteTakeStoneLabel = new JLabel(\"take black stone\");\r\n            whiteTakeStoneLabel.setVerticalAlignment(JLabel.BOTTOM);\r\n            whiteTakeStoneLabel.setHorizontalAlignment(JLabel.CENTER);\r\n            panel.add(whiteTakeStoneLabel);\r\n        }\r\n    }\r\n    public void removeRequestToDeleteStone(){\r\n        if(playerColour){\r\n            panel.remove(blackTakeStoneLabel);\r\n        }\r\n        else {\r\n            panel.remove(whiteTakeStoneLabel);\r\n        }\r\n    }\r\n    public void displayWinner(Boolean playerColour){\r\n        if (playerColour){\r\n            panel.remove(whiteMoveLabel);\r\n            panel.setBackground(Color.white);\r\n            blackWins = new JLabel(\"Black Wins\");\r\n            blackWins.setVerticalAlignment(JLabel.CENTER);\r\n            blackWins.setHorizontalAlignment(JLabel.CENTER);\r\n            panel.add(blackWins);\r\n        }\r\n        else {\r\n            panel.remove(blackMoveLabel);\r\n            panel.setBackground(Color.white);\r\n            whiteWins = new JLabel(\"White Wins\");\r\n            whiteWins.setVerticalAlignment(JLabel.CENTER);\r\n            whiteWins.setHorizontalAlignment(JLabel.CENTER);\r\n            panel.add(whiteWins);\r\n        }\r\n    }\r\n    public boolean lessThanThreeStonesOnBoard(Boolean playerColour){\r\n        if (playerColour){\r\n            if (whiteStonesOutOfGame.size() > 6){\r\n                return true;\r\n            }\r\n        }\r\n        else {\r\n            if (blackStonesOutOfGame.size() > 6){\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    public int getAmountOfStonesOnBoard (boolean playerColour){\r\n        if(playerColour){\r\n            return whiteStonesOnBoard.size();\r\n        }\r\n        else {\r\n            return blackStonesOnBoard.size();\r\n        }\r\n    }\r\n    public int getAmountOfStonesOutOfGame (boolean playerColour){\r\n        if(playerColour){\r\n            return amountOfWhiteStonesOutOfGame;\r\n        }\r\n        else {\r\n            return amountOfBlackStonesOutOfGame;\r\n        }\r\n    }\r\n    public Feld indexToField(int index) {\r\n        Feld returnValue = new Feld((byte)0,(byte) 0);\r\n        switch (index) {\r\n            case 1: returnValue = fields[0][0];\r\n                break;\r\n            case 2: returnValue = fields[0][1];\r\n                break;\r\n            case 3: returnValue = fields[0][2];\r\n                break;\r\n            case 4: returnValue = fields[0][3];\r\n                break;\r\n            case 5: returnValue = fields[0][4];\r\n                break;\r\n            case 6: returnValue = fields[0][5];\r\n                break;\r\n            case 7: returnValue = fields[0][6];\r\n                break;\r\n            case 8: returnValue = fields[0][7];\r\n                break;\r\n            case 9: returnValue = fields[1][0];\r\n                break;\r\n            case 10: returnValue = fields[1][1];\r\n                break;\r\n            case 11: returnValue = fields[1][2];\r\n                break;\r\n            case 12: returnValue = fields[1][3];\r\n                break;\r\n            case 13: returnValue = fields[1][4];\r\n                break;\r\n            case 14: returnValue = fields[1][5];\r\n                break;\r\n            case 15: returnValue = fields[1][6];\r\n                break;\r\n            case 16: returnValue = fields[1][7];\r\n                break;\r\n            case 17: returnValue = fields[2][0];\r\n                break;\r\n            case 18: returnValue = fields[2][1];\r\n                break;\r\n            case 19: returnValue = fields[2][2];\r\n                break;\r\n            case 20: returnValue = fields[2][3];\r\n                break;\r\n            case 21: returnValue = fields[2][4];\r\n                break;\r\n            case 22: returnValue = fields[2][5];\r\n                break;\r\n            case 23: returnValue = fields[2][6];\r\n                break;\r\n            case 24: returnValue = fields[2][7];\r\n                break;\r\n        }\r\n        return returnValue;\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Frame.java b/src/Frame.java
--- a/src/Frame.java	(revision d145281ccea1ad10dfc1ed4db8ebee5c674b8943)
+++ b/src/Frame.java	(date 1643463829000)
@@ -2,12 +2,12 @@
 import java.awt.*;
 import java.util.ArrayList;
 import java.util.List;
-import javax.swing.*;
 import java.util.Timer;
 import java.util.TimerTask;
 
 public class Frame extends JFrame{
     private boolean playerColour;
+    private boolean colour;
     private boolean gameOver;
     private int amountOfUnusedWhiteStones;
     private int amountOfUnusedBlackStones;
@@ -25,10 +25,8 @@
     private Feld[][] fields = new Feld[3][8];
     private GameHandler opponent;
     private String playerName;
+    private String opponentName;
 
-    private JPanel displayPlayerName;
-    private JLabel displayPlayerNameLabel;
-    private JPanel displayPlayerColour;
     private JLabel blackMoveLabel;
     private JLabel whiteMoveLabel;
     private JLabel blackTakeStoneLabel;
@@ -36,9 +34,17 @@
     private JLabel countLabel;
     private JLabel blackWins;
     private JLabel whiteWins;
-    private JLabel displayBlackPlayer;
-    private JLabel displayWhitePlayer;
     private JPanel panel;
+
+    //creating panels that display name of players
+    private JButton button;
+    private JTextField textField;
+    private JPanel yourNamePanel;
+    private JLabel enterAName;
+    private JLabel yourNameLabel;
+    private JPanel opponentsNamePanel;
+    private JLabel opponentsNameLabel;
+
     private JPanel largeHorizontalLine1 ;
     private JPanel largeHorizontalLine2;
     private JPanel largeHorizontalLine3;
@@ -71,30 +77,30 @@
     private JPanel horizontalCrossingLine2;
     private JPanel horizontalCrossingLine3;
     private JPanel horizontalCrossingLine4;
-    private MyMouseListener myMouseListener1;
-    private MyMouseListener myMouseListener2;
-    private MyMouseListener myMouseListener3;
-    private MyMouseListener myMouseListener4;
-    private MyMouseListener myMouseListener5;
-    private MyMouseListener myMouseListener6;
-    private MyMouseListener myMouseListener7;
-    private MyMouseListener myMouseListener8;
-    private MyMouseListener myMouseListener9;
-    private MyMouseListener myMouseListener10;
-    private MyMouseListener myMouseListener11;
-    private MyMouseListener myMouseListener12;
-    private MyMouseListener myMouseListener13;
-    private MyMouseListener myMouseListener14;
-    private MyMouseListener myMouseListener15;
-    private MyMouseListener myMouseListener16;
-    private MyMouseListener myMouseListener17;
-    private MyMouseListener myMouseListener18;
-    private MyMouseListener myMouseListener19;
-    private MyMouseListener myMouseListener20;
-    private MyMouseListener myMouseListener21;
-    private MyMouseListener myMouseListener22;
-    private MyMouseListener myMouseListener23;
-    private MyMouseListener myMouseListener24;
+    private GameMouseListener myMouseListener1;
+    private GameMouseListener myMouseListener2;
+    private GameMouseListener myMouseListener3;
+    private GameMouseListener myMouseListener4;
+    private GameMouseListener myMouseListener5;
+    private GameMouseListener myMouseListener6;
+    private GameMouseListener myMouseListener7;
+    private GameMouseListener myMouseListener8;
+    private GameMouseListener myMouseListener9;
+    private GameMouseListener myMouseListener10;
+    private GameMouseListener myMouseListener11;
+    private GameMouseListener myMouseListener12;
+    private GameMouseListener myMouseListener13;
+    private GameMouseListener myMouseListener14;
+    private GameMouseListener myMouseListener15;
+    private GameMouseListener myMouseListener16;
+    private GameMouseListener myMouseListener17;
+    private GameMouseListener myMouseListener18;
+    private GameMouseListener myMouseListener19;
+    private GameMouseListener myMouseListener20;
+    private GameMouseListener myMouseListener21;
+    private GameMouseListener myMouseListener22;
+    private GameMouseListener myMouseListener23;
+    private GameMouseListener myMouseListener24;
 
     public Frame(){
 
@@ -103,10 +109,11 @@
 
         this.setTitle("MÃ¼hle");
         this.setLayout(null);
-        this.setSize(800,875);
+        this.setSize(800,975);
         this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
         this.setResizable(false);
         this.playerName = playerName;
+        this.colour = colour;
         playerColour = true;
         gameOver = false;
         amountOfUnusedWhiteStones = 9;
@@ -136,13 +143,7 @@
         whiteMoveLabel = new JLabel("white moves");
         whiteMoveLabel.setVerticalAlignment(JLabel.CENTER);
         whiteMoveLabel.setHorizontalAlignment(JLabel.CENTER);
-        displayBlackPlayer = new JLabel("You are player black.");
-        displayBlackPlayer.setVerticalAlignment(JLabel.CENTER);
-        displayBlackPlayer.setHorizontalAlignment(JLabel.CENTER);
-        displayBlackPlayer.setForeground(Color.white);
-        displayWhitePlayer = new JLabel("You are player white.");
-        displayWhitePlayer.setVerticalAlignment(JLabel.CENTER);
-        displayWhitePlayer.setHorizontalAlignment(JLabel.CENTER);
+
         countLabel = new JLabel(String.valueOf(amountOfUnusedBlackStones));
         countLabel.setVerticalAlignment(JLabel.TOP);
         countLabel.setHorizontalAlignment(JLabel.CENTER);
@@ -153,28 +154,34 @@
         panel.add(whiteMoveLabel,BorderLayout.CENTER);
         panel.add(countLabel,BorderLayout.NORTH);
         this.add(panel);
-        displayPlayerColour = new JPanel();
-        if(colour) {
-            displayPlayerColour.setBackground(new Color(245,245,220,255));
-            displayPlayerColour.setBounds(300,775,200,50);
-            displayPlayerColour.setLayout(new BorderLayout());
-            displayPlayerColour.add(displayWhitePlayer,BorderLayout.CENTER);
+
+        //creating panels that display playername, opponent name, colour
+
+        button = new JButton("Ok");
+        textField = new JTextField(30);
+        textField.setPreferredSize(new Dimension(400,30));
+        enterAName = new JLabel();
+        if(colour){
+            enterAName.setText("Hello player white! PLease enter your name.");
         }
         else {
-            displayPlayerColour.setBackground(Color.black);
-            displayPlayerColour.setBounds(300,775,200,50);
-            displayPlayerColour.setLayout(new BorderLayout());
-            displayPlayerColour.add(displayBlackPlayer,BorderLayout.CENTER);
+            enterAName.setText("Hello player black! Please enter your name.");
         }
-        this.add(displayPlayerColour);
+        yourNamePanel = new JPanel();
+        yourNamePanel.add(textField);
+        yourNamePanel.add(button);
+        yourNamePanel.add(enterAName);
+        yourNamePanel.setBounds(50,775,400,100);
+        this.add(yourNamePanel);
+        yourNameLabel = new JLabel();
+        yourNamePanel.add(yourNameLabel);
+        opponentsNamePanel = new JPanel();
+        opponentsNameLabel = new JLabel();
+        opponentsNamePanel.add(opponentsNameLabel);
+        opponentsNamePanel.setBounds(50,850,400,100);
+        this.add(opponentsNamePanel);
 
-        displayPlayerNameLabel = new JLabel("Player: "+playerName);
-        displayPlayerName = new JPanel();
-        displayPlayerName.setBackground(Color.white);
-        displayPlayerName.setBounds(50,775,200,50);
-        displayPlayerName.setLayout(new BorderLayout());
-        displayPlayerName.add(displayPlayerNameLabel);
-        this.add(displayPlayerName);
+
 
         largeHorizontalLine1 = new JPanel();
         largeHorizontalLine1.setBackground(Color.black);
@@ -305,176 +312,177 @@
         horizontalCrossingLine4.setBounds(650,395,50,10);
         this.add(horizontalCrossingLine4);
 
+        //JTextField txtInput = new JTextField("");
+        //txtInput.setBounds(300,500,100,25);
 
         fields[0][0] = new Feld((byte)1,(byte)1);
-        myMouseListener1 = new MyMouseListener(this,fields[0][0]);
+        myMouseListener1 = new GameMouseListener(this,fields[0][0]);
         fields[0][0].addMouseListener(myMouseListener1);
         fields[0][0].setBounds(50,50,50,50);
         fields[0][0].setIndex(1);
         this.add(fields[0][0]);
 
         fields[0][1] = new Feld((byte)1,(byte)2);
-        myMouseListener2 = new MyMouseListener(this,fields[0][1]);
+        myMouseListener2 = new GameMouseListener(this,fields[0][1]);
         fields[0][1].addMouseListener(myMouseListener2);
         fields[0][1].setBounds(375,50,50,50);
         fields[0][1].setIndex(2);
         this.add(fields[0][1]);
 
         fields[0][2] = new Feld((byte)1,(byte)3);
-        myMouseListener3 = new MyMouseListener(this,fields[0][2]);
+        myMouseListener3 = new GameMouseListener(this,fields[0][2]);
         fields[0][2].addMouseListener(myMouseListener3);
         fields[0][2].setBounds(700,50,50,50);
         fields[0][2].setIndex(3);
         this.add(fields[0][2]);
 
         fields[0][3] = new Feld((byte)1,(byte)4);
-        myMouseListener4 = new MyMouseListener(this,fields[0][3]);
+        myMouseListener4 = new GameMouseListener(this,fields[0][3]);
         fields[0][3].addMouseListener(myMouseListener4);
         fields[0][3].setBounds(700,375,50,50);
         fields[0][3].setIndex(4);
         this.add(fields[0][3]);
 
         fields[0][4] = new Feld((byte)1,(byte)5);
-        myMouseListener5 = new MyMouseListener(this,fields[0][4]);
+        myMouseListener5 = new GameMouseListener(this,fields[0][4]);
         fields[0][4].addMouseListener(myMouseListener5);;
         fields[0][4].setBounds(700,700,50,50);
         fields[0][4].setIndex(5);
         this.add(fields[0][4]);
 
         fields[0][5] = new Feld((byte)1,(byte)6);
-        myMouseListener6 = new MyMouseListener(this,fields[0][5]);
+        myMouseListener6 = new GameMouseListener(this,fields[0][5]);
         fields[0][5].addMouseListener(myMouseListener6);
         fields[0][5].setBounds(375,700,50,50);
         fields[0][5].setIndex(6);
         this.add(fields[0][5]);
 
         fields[0][6] = new Feld((byte)1,(byte)7);
-        myMouseListener7 = new MyMouseListener(this,fields[0][6]);
+        myMouseListener7 = new GameMouseListener(this,fields[0][6]);
         fields[0][6].addMouseListener(myMouseListener7);
         fields[0][6].setBounds(50,700,50,50);
         fields[0][6].setIndex(7);
         this.add(fields[0][6]);
 
         fields[0][7] = new Feld((byte)1,(byte)8);
-        myMouseListener8 = new MyMouseListener(this,fields[0][7]);
+        myMouseListener8 = new GameMouseListener(this,fields[0][7]);
         fields[0][7].addMouseListener(myMouseListener8);
         fields[0][7].setBounds(50,375,50,50);
         fields[0][7].setIndex(8);
         this.add(fields[0][7]);
 
         fields[1][0] = new Feld((byte)2,(byte)1);
-        myMouseListener9 = new MyMouseListener(this,fields[1][0]);
+        myMouseListener9 = new GameMouseListener(this,fields[1][0]);
         fields[1][0].addMouseListener(myMouseListener9);
         fields[1][0].setBounds(150,150,50,50);
         fields[1][0].setIndex(9);
         this.add(fields[1][0]);
 
         fields[1][1] = new Feld((byte)2,(byte)2);
-        myMouseListener10 = new MyMouseListener(this,fields[1][1]);
+        myMouseListener10 = new GameMouseListener(this,fields[1][1]);
         fields[1][1].addMouseListener(myMouseListener10);
         fields[1][1].setBounds(375,150,50,50);
         fields[1][1].setIndex(10);
         this.add(fields[1][1]);
 
         fields[1][2] = new Feld((byte)2,(byte)3);
-        myMouseListener11 = new MyMouseListener(this,fields[1][2]);
+        myMouseListener11 = new GameMouseListener(this,fields[1][2]);
         fields[1][2].addMouseListener(myMouseListener11);
         fields[1][2].setBounds(600,150,50,50);
         fields[1][2].setIndex(11);
         this.add(fields[1][2]);
 
         fields[1][3] = new Feld((byte)2,(byte)4);
-        myMouseListener12 = new MyMouseListener(this,fields[1][3]);
+        myMouseListener12 = new GameMouseListener(this,fields[1][3]);
         fields[1][3].addMouseListener(myMouseListener12);
         fields[1][3].setBounds(600,375,50,50);
         fields[1][3].setIndex(12);
         this.add(fields[1][3]);
 
         fields[1][4] = new Feld((byte)2,(byte)5);
-        myMouseListener13 = new MyMouseListener(this,fields[1][4]);
+        myMouseListener13 = new GameMouseListener(this,fields[1][4]);
         fields[1][4].addMouseListener(myMouseListener13);
         fields[1][4].setBounds(600,600,50,50);
         fields[1][4].setIndex(13);
         this.add(fields[1][4]);
 
         fields[1][5] = new Feld((byte)2,(byte)6);
-        myMouseListener14 = new MyMouseListener(this,fields[1][5]);
+        myMouseListener14 = new GameMouseListener(this,fields[1][5]);
         fields[1][5].addMouseListener(myMouseListener14);
         fields[1][5].setBounds(375,600,50,50);
         fields[1][5].setIndex(14);
         this.add(fields[1][5]);
 
         fields[1][6] = new Feld((byte)2,(byte)7);
-        myMouseListener15 = new MyMouseListener(this,fields[1][6]);
+        myMouseListener15 = new GameMouseListener(this,fields[1][6]);
         fields[1][6].addMouseListener(myMouseListener15);
         fields[1][6].setBounds(150,600,50,50);
         fields[1][6].setIndex(15);
         this.add(fields[1][6]);
 
         fields[1][7] = new Feld((byte)2,(byte)8);
-        myMouseListener16 = new MyMouseListener(this,fields[1][7]);
+        myMouseListener16 = new GameMouseListener(this,fields[1][7]);
         fields[1][7].addMouseListener(myMouseListener16);
         fields[1][7].setBounds(150,375,50,50);
         fields[1][7].setIndex(16);
         this.add(fields[1][7]);
 
         fields[2][0] = new Feld((byte)3,(byte)1);
-        myMouseListener17 = new MyMouseListener(this,fields[2][0]);
+        myMouseListener17 = new GameMouseListener(this,fields[2][0]);
         fields[2][0].addMouseListener(myMouseListener17);
         fields[2][0].setBounds(250,250,50,50);
         fields[2][0].setIndex(17);
         this.add(fields[2][0]);
 
         fields[2][1] = new Feld((byte)3,(byte)2);
-        myMouseListener18 = new MyMouseListener(this,fields[2][1]);
+        myMouseListener18 = new GameMouseListener(this,fields[2][1]);
         fields[2][1].addMouseListener(myMouseListener18);
         fields[2][1].setBounds(375,250,50,50);
         fields[2][1].setIndex(18);
         this.add(fields[2][1]);
 
         fields[2][2] = new Feld((byte)3,(byte)3);
-        myMouseListener19 = new MyMouseListener(this,fields[2][2]);
+        myMouseListener19 = new GameMouseListener(this,fields[2][2]);
         fields[2][2].addMouseListener(myMouseListener19);
         fields[2][2].setBounds(500,250,50,50);
         fields[2][2].setIndex(19);
         this.add(fields[2][2]);
 
         fields[2][3] = new Feld((byte)3,(byte)4);
-        myMouseListener20 = new MyMouseListener(this,fields[2][3]);
+        myMouseListener20 = new GameMouseListener(this,fields[2][3]);
         fields[2][3].addMouseListener(myMouseListener20);
         fields[2][3].setBounds(500,375,50,50);
         fields[2][3].setIndex(20);
         this.add(fields[2][3]);
 
         fields[2][4] = new Feld((byte)3,(byte)5);
-        myMouseListener21 = new MyMouseListener(this,fields[2][4]);
+        myMouseListener21 = new GameMouseListener(this,fields[2][4]);
         fields[2][4].addMouseListener(myMouseListener21);
         fields[2][4].setBounds(500,500,50,50);
         fields[2][4].setIndex(21);
         this.add(fields[2][4]);
 
         fields[2][5] = new Feld((byte)3,(byte)6);
-        myMouseListener22 = new MyMouseListener(this,fields[2][5]);
+        myMouseListener22 = new GameMouseListener(this,fields[2][5]);
         fields[2][5].addMouseListener(myMouseListener22);
         fields[2][5].setBounds(375,500,50,50);
         fields[2][5].setIndex(22);
         this.add(fields[2][5]);
 
         fields[2][6] = new Feld((byte)3,(byte)7);
-        myMouseListener23 = new MyMouseListener(this,fields[2][6]);
+        myMouseListener23 = new GameMouseListener(this,fields[2][6]);
         fields[2][6].addMouseListener(myMouseListener23);
         fields[2][6].setBounds(250,500,50,50);
         fields[2][6].setIndex(23);
         this.add(fields[2][6]);
 
         fields[2][7] = new Feld((byte)3,(byte)8);
-        myMouseListener24 = new MyMouseListener(this,fields[2][7]);
+        myMouseListener24 = new GameMouseListener(this,fields[2][7]);
         fields[2][7].addMouseListener(myMouseListener24);
         fields[2][7].setBounds(250,375,50,50);
         fields[2][7].setIndex(24);
         this.add(fields[2][7]);
 
-
         JLabel TimerLabelWhite = new JLabel();
         JLabel TimerLabelBlack = new JLabel();
         TimerLabelWhite.setBounds(200,1,200,50);
@@ -520,79 +528,58 @@
             }
         }, 0, 1000);
 
-
         this.setVisible(true);
     }
 
 
-    public List<Feld> getWhiteStonesOnBoard() {
-        return whiteStonesOnBoard;
-    }
-
-    public List<Feld> getBlackStonesOnBoard() {
-        return blackStonesOnBoard;
-    }
-
+    public void setOpponentName(String opponentName) {this.opponentName = opponentName;}
+    public JPanel getOpponentsNamePanel() {return opponentsNamePanel;}
+    public JLabel getOpponentsNameLabel() {return opponentsNameLabel;}
+    public boolean isColour() {return colour;}
+    public JLabel getYourNameLabel() {return yourNameLabel;}
+    public JButton getButton() {return button;}
+    public JTextField getTextField() {return textField;}
+    public String getPlayerName() {return playerName;}
+    public JLabel getEnterAName() {return enterAName;}
+    public JPanel getYourNamePanel() {return yourNamePanel;}
+    public void setPlayerName(String playerName) {this.playerName = playerName;}
     public GameHandler getOpponent() {
         return opponent;
     }
-
-    public void setOpponent(GameHandler opponent) {
-        this.opponent = opponent;
-    }
-
     public boolean isChangePlayer() {
         return changePlayer;
     }
-
     public void setChangePlayer(boolean changePlayer) {
         this.changePlayer = changePlayer;
     }
-
     public boolean isItsYourTurn() {
         return itsYourTurn;
     }
-
     public void setItsYourTurn(boolean itsYourTurn) {
         this.itsYourTurn = itsYourTurn;
     }
-
     public boolean isGameOver() {
         return gameOver;
     }
-
     public boolean isaMillWasCreatedInThePreviousAction() {
         return aMillWasCreatedInThePreviousAction;
     }
-
     public void setGameOver(boolean gameOver) {
         this.gameOver = gameOver;
     }
-
     public boolean isPlayerColour() {
         return playerColour;
     }
-
     public void setaMillWasCreatedInThePreviousAction(boolean aMillWasCreatedInThePreviousAction) {
         this.aMillWasCreatedInThePreviousAction = aMillWasCreatedInThePreviousAction;
     }
-
-    public void setPlayerName(String playerName) {
-        this.playerName = playerName;
-    }
-
     public int getAmountOfUnusedWhiteStones() {
         return amountOfUnusedWhiteStones;
     }
-
     public int getAmountOfUnusedBlackStones() {
         return amountOfUnusedBlackStones;
     }
 
-    public Feld[][] getFields() {
-        return fields;
-    }
-
     public int getAmountOfUnusedStones(boolean playerColour){
         if (playerColour){return getAmountOfUnusedWhiteStones();}
         else {return getAmountOfUnusedBlackStones();}
@@ -674,6 +661,7 @@
             }
         }
     }
+
     public void secondPhaseSetStone(Feld field){
         Feld opponentsField = opponent.getFrame().indexToField(field.getIndex());
 
Index: Muehle_Serve_Version.iml
===================================================================
diff --git a/Muehle_Serve_Version.iml b/Muehle_Serve_Version.iml
deleted file mode 100644
--- a/Muehle_Serve_Version.iml	(revision d145281ccea1ad10dfc1ed4db8ebee5c674b8943)
+++ /dev/null	(revision d145281ccea1ad10dfc1ed4db8ebee5c674b8943)
@@ -1,11 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<module type="JAVA_MODULE" version="4">
-  <component name="NewModuleRootManager" inherit-compiler-output="true">
-    <exclude-output />
-    <content url="file://$MODULE_DIR$">
-      <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
-    </content>
-    <orderEntry type="inheritedJdk" />
-    <orderEntry type="sourceFolder" forTests="false" />
-  </component>
-</module>
\ No newline at end of file
Index: src/GameHandler.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import java.io.BufferedReader;\r\nimport java.io.IOException;\r\nimport java.io.InputStreamReader;\r\nimport java.io.PrintWriter;\r\nimport java.net.Socket;\r\n\r\npublic class GameHandler implements Runnable {\r\n\r\n    private Socket socket;\r\n    private BufferedReader input;\r\n    private PrintWriter output;\r\n    private boolean playerColour;\r\n    private Frame frame;\r\n    private String playerName;\r\n    private GameHandler opponent;\r\n\r\n    public String getPlayerName() {return playerName;}\r\n    public void setPlayerName(String playerName) {this.playerName = playerName;}\r\n    public void setOpponent(GameHandler opponent) {\r\n        this.opponent = opponent;\r\n    }\r\n    public Frame getFrame() {\r\n        return frame;\r\n    }\r\n    public void setPlayerColour(boolean playerColour) {\r\n        this.playerColour = playerColour;\r\n    }\r\n    public boolean isPlayerColour() {return playerColour;}\r\n\r\n    public GameHandler(Socket socket) throws IOException {\r\n        this.socket = socket;\r\n        input = new BufferedReader(new InputStreamReader(socket.getInputStream()));\r\n        output = new PrintWriter(socket.getOutputStream(),true);\r\n        frame = new Frame();\r\n    }\r\n\r\n    public GameHandler(Socket socket, boolean playerColour, GameHandler opponent) throws IOException {\r\n        this.socket = socket;\r\n        this.playerColour = playerColour;\r\n        this.opponent = opponent;\r\n        input = new BufferedReader(new InputStreamReader(socket.getInputStream()));\r\n        output = new PrintWriter(socket.getOutputStream(),true);\r\n        frame = new Frame();\r\n    }\r\n\r\n    public GameHandler(Socket socket, boolean playerColour) throws IOException {\r\n        this.socket = socket;\r\n        this.playerColour = playerColour;\r\n        input = new BufferedReader(new InputStreamReader(socket.getInputStream()));\r\n        output = new PrintWriter(socket.getOutputStream(),true);\r\n        frame = new Frame();\r\n    }\r\n\r\n    @Override\r\n    public void run() {\r\n        frame = new Frame(playerColour, opponent, playerName);\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/GameHandler.java b/src/GameHandler.java
--- a/src/GameHandler.java	(revision d145281ccea1ad10dfc1ed4db8ebee5c674b8943)
+++ b/src/GameHandler.java	(date 1643463829000)
@@ -1,3 +1,4 @@
+import javax.swing.*;
 import java.io.BufferedReader;
 import java.io.IOException;
 import java.io.InputStreamReader;
@@ -12,9 +13,11 @@
     private boolean playerColour;
     private Frame frame;
     private String playerName;
+    private String opponentName;
     private GameHandler opponent;
 
     public String getPlayerName() {return playerName;}
+    public String getOpponentName() {return opponentName;}
     public void setPlayerName(String playerName) {this.playerName = playerName;}
     public void setOpponent(GameHandler opponent) {
         this.opponent = opponent;
@@ -33,26 +36,10 @@
         output = new PrintWriter(socket.getOutputStream(),true);
         frame = new Frame();
     }
-
-    public GameHandler(Socket socket, boolean playerColour, GameHandler opponent) throws IOException {
-        this.socket = socket;
-        this.playerColour = playerColour;
-        this.opponent = opponent;
-        input = new BufferedReader(new InputStreamReader(socket.getInputStream()));
-        output = new PrintWriter(socket.getOutputStream(),true);
-        frame = new Frame();
-    }
-
-    public GameHandler(Socket socket, boolean playerColour) throws IOException {
-        this.socket = socket;
-        this.playerColour = playerColour;
-        input = new BufferedReader(new InputStreamReader(socket.getInputStream()));
-        output = new PrintWriter(socket.getOutputStream(),true);
-        frame = new Frame();
-    }
 
     @Override
     public void run() {
+
         frame = new Frame(playerColour, opponent, playerName);
     }
 }
Index: src/ClientHandler.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import java.io.*;\r\nimport java.net.Socket;\r\nimport java.util.Objects;\r\n\r\npublic class ClientHandler implements Runnable {\r\n    private Socket client;\r\n    private BufferedReader input;\r\n    private PrintWriter output;\r\n    private String playerName;\r\n    private boolean playerColour;\r\n    private boolean signedIn = false;\r\n    private GameHandler gameHandler;\r\n    private ClientHandler opponent;\r\n\r\n    public boolean isSignedIn() {return signedIn;}\r\n    public String getPlayerName() {\r\n        return playerName;\r\n    }\r\n    public void setPlayerColour(boolean playerColour) {\r\n        this.playerColour = playerColour;}\r\n    public void setOpponent(ClientHandler opponent) {\r\n        this.opponent = opponent;\r\n    }\r\n\r\n    public ClientHandler (Socket clientSocket, boolean playerColour, ClientHandler opponent, GameHandler gameHandler) throws IOException {\r\n        this.client = clientSocket;\r\n        this.playerColour = playerColour;\r\n        this.opponent = opponent;\r\n        this.gameHandler = gameHandler;\r\n        input = new BufferedReader(new InputStreamReader(client.getInputStream()));\r\n        output = new PrintWriter(client.getOutputStream(),true);\r\n\r\n    }\r\n\r\n    public ClientHandler(Socket client, boolean playerColour, GameHandler gameHandler) throws IOException {\r\n        this.client = client;\r\n        this.playerColour = playerColour;\r\n        this.gameHandler = gameHandler;\r\n        input = new BufferedReader(new InputStreamReader(client.getInputStream()));\r\n        output = new PrintWriter(client.getOutputStream(),true);\r\n    }\r\n\r\n    public ClientHandler(Socket client, GameHandler gameHandler) throws IOException{\r\n        this.client = client;\r\n        this.gameHandler = gameHandler;\r\n        input = new BufferedReader(new InputStreamReader(client.getInputStream()));\r\n        output = new PrintWriter(client.getOutputStream(),true);\r\n    }\r\n\r\n    @Override\r\n    public void run(){\r\n        try{\r\n            //Dialog that asks for the name\r\n            nameInteraction(playerColour);\r\n            if (Server.getClients().size() > 1 && signedIn) {\r\n                opponent.output.println(\">\"+playerName+\" has entered the game.<\");\r\n                if(opponent.signedIn){\r\n                    Server.getGamePool().execute(gameHandler);\r\n                    Server.getGamePool().execute(opponent.gameHandler);\r\n                }\r\n            }\r\n            String message = input.readLine();\r\n\r\n            while(!Objects.equals(message, \"quit\") && !Objects.equals(message, null)) {\r\n                opponent.output.println(\"[\"+playerName+\"]: \"+message);\r\n                message = input.readLine();\r\n            }\r\n        } catch (IOException e){\r\n            System.err.println(\"IOException in client handler\");\r\n            System.err.println(e.getStackTrace());\r\n        }\r\n        finally {\r\n            if(Server.getClients().size() > 2) {\r\n                Server.getClients().get(2).setPlayerColour(this.playerColour);\r\n                Server.getGames().get(2).setPlayerColour(this.playerColour);\r\n            }\r\n            if(Server.getClients().size() > 1 && signedIn) {\r\n                opponent.output.println(\">\"+this.playerName+\" has left the game.<\");\r\n            }\r\n            output.close();\r\n            Server.getClients().remove(this);\r\n            Server.getGames().remove(this.gameHandler);\r\n\r\n            if(Server.getClients().size() > 1) {\r\n                Server.getClients().get(0).opponent = Server.getClients().get(1);\r\n                Server.getClients().get(1).opponent = Server.getClients().get(0);\r\n            }\r\n            try {\r\n                input.close();\r\n                client.close();\r\n            } catch (IOException e) {\r\n                e.printStackTrace();\r\n            }\r\n        }\r\n    }\r\n\r\n    private void nameInteraction (boolean playerColour) throws IOException {\r\n        if (Server.getClients().size() > 1 && Server.getClients().get(0).isSignedIn()){\r\n            this.output.println(\">\"+Server.getClients().get(0).getPlayerName()+\" is waiting for you.<\\n\");\r\n        }\r\n        if (playerColour) {\r\n            output.println(\"Hello player white! Please enter your name:\");\r\n        }\r\n        else {\r\n            output.println(\"Hello player black! Please enter your name:\");\r\n        }\r\n        String nameRequest = input.readLine();\r\n        playerName = nameRequest;\r\n        gameHandler.setPlayerName(playerName);\r\n        signedIn = true;\r\n        output.println(\"Welcome to the game, \"+getPlayerName()+\"!\\n\" +\r\n                \"\\nENTER 'quit' TO LEAVE THE GAME OR SEND A MESSAGE TO YOUR OPPONENT.\\n\");\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/ClientHandler.java b/src/ClientHandler.java
--- a/src/ClientHandler.java	(revision d145281ccea1ad10dfc1ed4db8ebee5c674b8943)
+++ b/src/ClientHandler.java	(date 1643463829000)
@@ -1,5 +1,6 @@
 import java.io.*;
 import java.net.Socket;
+import java.sql.SQLException;
 import java.util.Objects;
 
 public class ClientHandler implements Runnable {
@@ -22,54 +23,31 @@
         this.opponent = opponent;
     }
 
-    public ClientHandler (Socket clientSocket, boolean playerColour, ClientHandler opponent, GameHandler gameHandler) throws IOException {
+    public ClientHandler (Socket clientSocket, GameHandler gameHandler) throws IOException {
         this.client = clientSocket;
-        this.playerColour = playerColour;
-        this.opponent = opponent;
         this.gameHandler = gameHandler;
         input = new BufferedReader(new InputStreamReader(client.getInputStream()));
         output = new PrintWriter(client.getOutputStream(),true);
 
     }
 
-    public ClientHandler(Socket client, boolean playerColour, GameHandler gameHandler) throws IOException {
-        this.client = client;
-        this.playerColour = playerColour;
-        this.gameHandler = gameHandler;
-        input = new BufferedReader(new InputStreamReader(client.getInputStream()));
-        output = new PrintWriter(client.getOutputStream(),true);
-    }
-
-    public ClientHandler(Socket client, GameHandler gameHandler) throws IOException{
-        this.client = client;
-        this.gameHandler = gameHandler;
-        input = new BufferedReader(new InputStreamReader(client.getInputStream()));
-        output = new PrintWriter(client.getOutputStream(),true);
-    }
-
     @Override
     public void run(){
         try{
-            //Dialog that asks for the name
-            nameInteraction(playerColour);
-            if (Server.getClients().size() > 1 && signedIn) {
-                opponent.output.println(">"+playerName+" has entered the game.<");
-                if(opponent.signedIn){
-                    Server.getGamePool().execute(gameHandler);
-                    Server.getGamePool().execute(opponent.gameHandler);
-                }
-            }
+            LogIn_SignIn_Screen logIn_signIn_screen = new LogIn_SignIn_Screen(Server.getActivePlayers());
+            //new Thread(gameHandler).start();
             String message = input.readLine();
 
             while(!Objects.equals(message, "quit") && !Objects.equals(message, null)) {
-                opponent.output.println("["+playerName+"]: "+message);
+                output.println("["+playerName+"]: "+message);
                 message = input.readLine();
             }
         } catch (IOException e){
             System.err.println("IOException in client handler");
             System.err.println(e.getStackTrace());
-        }
-        finally {
+        } catch (SQLException e) {
+            e.printStackTrace();
+        } finally {
             if(Server.getClients().size() > 2) {
                 Server.getClients().get(2).setPlayerColour(this.playerColour);
                 Server.getGames().get(2).setPlayerColour(this.playerColour);
@@ -93,22 +71,4 @@
             }
         }
     }
-
-    private void nameInteraction (boolean playerColour) throws IOException {
-        if (Server.getClients().size() > 1 && Server.getClients().get(0).isSignedIn()){
-            this.output.println(">"+Server.getClients().get(0).getPlayerName()+" is waiting for you.<\n");
-        }
-        if (playerColour) {
-            output.println("Hello player white! Please enter your name:");
-        }
-        else {
-            output.println("Hello player black! Please enter your name:");
-        }
-        String nameRequest = input.readLine();
-        playerName = nameRequest;
-        gameHandler.setPlayerName(playerName);
-        signedIn = true;
-        output.println("Welcome to the game, "+getPlayerName()+"!\n" +
-                "\nENTER 'quit' TO LEAVE THE GAME OR SEND A MESSAGE TO YOUR OPPONENT.\n");
-    }
 }
Index: .idea/modules.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"ProjectModuleManager\">\r\n    <modules>\r\n      <module fileurl=\"file://$PROJECT_DIR$/Muehle_Serve_Version.iml\" filepath=\"$PROJECT_DIR$/Muehle_Serve_Version.iml\" />\r\n    </modules>\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/modules.xml b/.idea/modules.xml
--- a/.idea/modules.xml	(revision d145281ccea1ad10dfc1ed4db8ebee5c674b8943)
+++ b/.idea/modules.xml	(date 1643463829000)
@@ -2,7 +2,7 @@
 <project version="4">
   <component name="ProjectModuleManager">
     <modules>
-      <module fileurl="file://$PROJECT_DIR$/Muehle_Serve_Version.iml" filepath="$PROJECT_DIR$/Muehle_Serve_Version.iml" />
+      <module fileurl="file://$PROJECT_DIR$/Muehle_Server_Version.iml" filepath="$PROJECT_DIR$/Muehle_Server_Version.iml" />
     </modules>
   </component>
 </project>
\ No newline at end of file
Index: src/Server.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import java.io.IOException;\r\nimport java.net.ServerSocket;\r\nimport java.net.Socket;\r\nimport java.util.ArrayList;\r\nimport java.util.concurrent.ExecutorService;\r\nimport java.util.concurrent.Executors;\r\n\r\npublic class Server {\r\n\r\n    //Liste, die die einzelnen Threads hÃ¤lt:\r\n    private static ArrayList<ClientHandler> clients;\r\n    private static ArrayList<GameHandler> games;\r\n    private static ExecutorService playerPool = Executors.newFixedThreadPool(2);\r\n    private static ExecutorService gamePool = Executors.newFixedThreadPool(2);\r\n    private static ClientHandler clientThread;\r\n    private static GameHandler gameThread;\r\n\r\n\r\n    public static ExecutorService getGamePool() {return gamePool;}\r\n    public static ArrayList<ClientHandler> getClients(){return clients;}\r\n    public static ArrayList<GameHandler> getGames() {return games;}\r\n\r\n    public static void main(String[] args) throws IOException {\r\n\r\n        clients = new ArrayList<>();\r\n        games = new ArrayList<>();\r\n        ServerSocket serverSocket = new ServerSocket(8080);\r\n\r\n        while (true) {\r\n\r\n            System.out.println(\"[SERVER]: Waiting for client connection...\");\r\n\r\n            Socket client = serverSocket.accept();\r\n            System.out.println(\"[SERVER]: Connected to client!\");\r\n\r\n            if (clients.size() == 0){\r\n                gameThread = new GameHandler(client, true);\r\n                clientThread = new ClientHandler(client,true, gameThread);\r\n            }\r\n            else if (clients.size() == 1){\r\n                gameThread = new GameHandler(client, !games.get(0).isPlayerColour(), games.get(0));\r\n                clientThread = new ClientHandler(client,gameThread.isPlayerColour(),clients.get(0),gameThread);\r\n                games.get(0).setOpponent(gameThread);\r\n                clients.get(0).setOpponent(clientThread);\r\n            }\r\n            else {\r\n                gameThread = new GameHandler(client);\r\n                clientThread = new ClientHandler(client,gameThread);\r\n            }\r\n            games.add(gameThread);\r\n            clients.add(clientThread);\r\n            playerPool.execute(clientThread);\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Server.java b/src/Server.java
--- a/src/Server.java	(revision d145281ccea1ad10dfc1ed4db8ebee5c674b8943)
+++ b/src/Server.java	(date 1643463829000)
@@ -10,20 +10,23 @@
     //Liste, die die einzelnen Threads hÃ¤lt:
     private static ArrayList<ClientHandler> clients;
     private static ArrayList<GameHandler> games;
-    private static ExecutorService playerPool = Executors.newFixedThreadPool(2);
-    private static ExecutorService gamePool = Executors.newFixedThreadPool(2);
+    private static ArrayList<ClientHandler> activePlayers;
+    //private static ExecutorService playerPool = Executors.newFixedThreadPool(2);
+    //private static ExecutorService gamePool = Executors.newFixedThreadPool(2);
     private static ClientHandler clientThread;
     private static GameHandler gameThread;
 
 
-    public static ExecutorService getGamePool() {return gamePool;}
+    //public static ExecutorService getGamePool() {return gamePool;}
     public static ArrayList<ClientHandler> getClients(){return clients;}
     public static ArrayList<GameHandler> getGames() {return games;}
+    public static ArrayList<ClientHandler> getActivePlayers() {return activePlayers;}
 
     public static void main(String[] args) throws IOException {
 
         clients = new ArrayList<>();
         games = new ArrayList<>();
+        activePlayers =  new ArrayList<>();
         ServerSocket serverSocket = new ServerSocket(8080);
 
         while (true) {
@@ -33,23 +36,12 @@
             Socket client = serverSocket.accept();
             System.out.println("[SERVER]: Connected to client!");
 
-            if (clients.size() == 0){
-                gameThread = new GameHandler(client, true);
-                clientThread = new ClientHandler(client,true, gameThread);
-            }
-            else if (clients.size() == 1){
-                gameThread = new GameHandler(client, !games.get(0).isPlayerColour(), games.get(0));
-                clientThread = new ClientHandler(client,gameThread.isPlayerColour(),clients.get(0),gameThread);
-                games.get(0).setOpponent(gameThread);
-                clients.get(0).setOpponent(clientThread);
-            }
-            else {
-                gameThread = new GameHandler(client);
-                clientThread = new ClientHandler(client,gameThread);
-            }
+            gameThread = new GameHandler(client);
+            clientThread = new ClientHandler(client, gameThread);
             games.add(gameThread);
             clients.add(clientThread);
-            playerPool.execute(clientThread);
+            new Thread(clientThread).start();
+            //playerPool.execute(clientThread);
         }
     }
 }
Index: src/Client.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import java.io.BufferedReader;\r\nimport java.io.IOException;\r\nimport java.io.InputStreamReader;\r\nimport java.io.PrintWriter;\r\nimport java.net.Socket;\r\n\r\npublic class Client {\r\n\r\n\r\n    public static void main(String[] args) throws IOException {\r\n\r\n        //Basic stuff -> Socket, In- and Output\r\n        Socket socket = new Socket(\"127.0.0.1\",8080);\r\n        ReceivingMessages receivingMessages = new ReceivingMessages(socket);\r\n\r\n        BufferedReader keyboard = new BufferedReader(new InputStreamReader(System.in));\r\n        PrintWriter output = new PrintWriter(socket.getOutputStream(),true);\r\n\r\n        //starting new Thread that's responsible for receiving messages all the time\r\n        new Thread(receivingMessages).start();;\r\n\r\n        //instanciating the message a client can send\r\n        String message = \"dummyString\";\r\n\r\n        //the client can leave the program by entering 'quit'\r\n        while (!message.equals(\"quit\")) {\r\n            message = keyboard.readLine();\r\n            output.println(message);\r\n        }\r\n        Thread.currentThread().interrupt();\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Client.java b/src/Client.java
--- a/src/Client.java	(revision d145281ccea1ad10dfc1ed4db8ebee5c674b8943)
+++ b/src/Client.java	(date 1643463829000)
@@ -3,7 +3,6 @@
 import java.io.InputStreamReader;
 import java.io.PrintWriter;
 import java.net.Socket;
-
 public class Client {
 
 
@@ -17,7 +16,7 @@
         PrintWriter output = new PrintWriter(socket.getOutputStream(),true);
 
         //starting new Thread that's responsible for receiving messages all the time
-        new Thread(receivingMessages).start();;
+        new Thread(receivingMessages).start();
 
         //instanciating the message a client can send
         String message = "dummyString";
